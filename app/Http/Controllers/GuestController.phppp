<?php

namespace App\Http\Controllers;

use App\Models\Guest;
use App\Models\Couple;
use App\Models\GuestAttendant;
use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;
use Illuminate\Support\Facades\Auth;

class GuestController extends CrudController
{
    public function __construct()
    {
        $this->model = Guest::class;
        $this->columns = ['id', 'couple_id', 'name', 'email', 'phone', 'guest_index', 'created_at', 'updated_at'];
    }
     protected function getRoutePrefix(): string
    {
        return Auth::user()->role === 'client' ? 'my-guests':'guests';
    }
    /**
     * Display a listing of the resource.
     */
    public function index(): View
    {
        $title = 'Guests';
        $query=Guest::join('couples','guests.couple_id','=','couples.id')
        ->select('guests.*','couples.bride_name','couples.groom_name');
        if (auth()->user()->isClient()) {
            $query->where('couples.client_id', auth()->user()->client_id);
        }
        $guests=$query->latest()->paginate(10);
        return view('guests.index', [
            'guests' => $guests,
            'title' => $title,
            'createRoute' => route($this->getRoutePrefix().'.create'),
            'editRoute' => $this->getRoutePrefix().'.edit',
            'showRoute' => $this->getRoutePrefix().'.show',
            'deleteRoute' => $this->getRoutePrefix().'.destroy',
        ]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(): View
    {
        $title = 'Create Guest';
        $query=Couple::query();
        if (auth()->user()->isClient()) {
            $query->where('client_id', auth()->user()->client_id);
        }
        $couples=$query->get();
        return view('guests.create', [
            'title' => $title,
            'couples' => $couples,
            'storeRoute' => route($this->getRoutePrefix().'.store'),
            'indexRoute' => route($this->getRoutePrefix().'.index'),
        ]);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'couple_id' => 'required|exists:couples,id',
            'name' => 'required|string|max:100',
            'email' => 'nullable|email|max:150',
            'phone' => 'nullable|string|max:20',
        ]);

        // Generate guest_index as combination of couple_id and phone
        $guestIndex = null;
        if ($request->phone) {
            $guestIndex = $request->couple_id . '_' . preg_replace('/[^0-9]/', '', $request->phone);
        }

        Guest::create([
            'couple_id' => $request->couple_id,
            'name' => $request->name,
            'email' => $request->email,
            'phone' => $request->phone,
            'guest_index' => $guestIndex,
        ]);

        return redirect()->route($this->getRoutePrefix().'.index')
            ->with('success', 'Guest created successfully.');
    }

    /**
     * Display the specified resource.
     */
    public function show($id): View
    {
        $guest = Guest::with('couple')->findOrFail($id);
        $title = 'View Guest';
        
        return view('guests.show', [
            'guest' => $guest,
            'title' => $title,
            'indexRoute' => route($this->getRoutePrefix().'.index'),
            'editRoute' => $this->getRoutePrefix().'.edit',
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit($id): View
    {
        $record = Guest::findOrFail($id);
        $title = 'Edit Guest';
        $query=Couple::query();
        if (auth()->user()->isClient()) {
            $query->where('client_id', auth()->user()->client_id);
        }
        $couples=$query->get();
        return view('guests.edit', [
            'record' => $record,
            'title' => $title,
            'couples' => $couples,
            'indexRoute' => route($this->getRoutePrefix().'.index'),
            'updateRoute' => route($this->getRoutePrefix().'.update',  $record->id),
        ]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, $id): RedirectResponse
    {
        $request->validate([
            'couple_id' => 'required|exists:couples,id',
            'name' => 'required|string|max:100',
            'email' => 'nullable|email|max:150',
            'phone' => 'nullable|string|max:20',
        ]);

        $record = Guest::findOrFail($id);
        
        // Generate guest_index as combination of couple_id and phone
        $guestIndex = null;
        if ($request->phone) {
            $guestIndex = $request->couple_id . '_' . preg_replace('/[^0-9]/', '', $request->phone);
        }

        $record->update([
            'couple_id' => $request->couple_id,
            'name' => $request->name,
            'email' => $request->email,
            'phone' => $request->phone,
            'guest_index' => $guestIndex,
        ]);

        return redirect()->route($this->getRoutePrefix().'.index')
            ->with('success', 'Guest updated successfully.');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy($id): RedirectResponse
    {
        $record = Guest::findOrFail($id);
        $record->delete();

        return redirect()->route($this->getRoutePrefix().'.index')
            ->with('success', 'Guest deleted successfully.');
    }
    
    /**
     * Display the attendant page for a specific wedding event
     */
    public function attendant(Request $request, $wedding_event_id = null)
    {
        // Get the wedding event ID from the route parameter or query parameter
        $weddingEventId = $wedding_event_id ?? $request->query('wedding_event_id') ?? $request->input('wedding_event_id');
        
        if (!$weddingEventId) {
            dd('1');
            // If no wedding event ID is provided, return error
            abort(400, 'Wedding event ID is required to access attendant page.');
        }
        
        // Load the wedding event
        $weddingEvent = \App\Models\WeddingEvent::with('couple')->find($weddingEventId);
        
        if (!$weddingEvent) {
            dd('2');

            abort(404, 'Wedding event not found.');
        }
        // Check if the authenticated user has access to this wedding event
        $user = Auth::user();
        $hasAccess = false;
        
        if ($user->isAdmin()) {
            dd('3');

            $hasAccess = true; // Admin can access any wedding event
        } elseif ($user->isClient() && $user->client_id) {
            // Check if the wedding event belongs to the authenticated client
            $couple = $weddingEvent->couple;
            if ($couple && $couple->client_id == $user->client_id) {
                $hasAccess = true;
            }
        }
        
        if (!$hasAccess) {
            dd('8');
            abort(403, 'Access denied to this wedding event.');
        }
        
        // Load the guest attendants for this wedding event
        $presentGuests = GuestAttendant::with(['guest', 'weddingEvent'])
            ->where('wedding_event_id', $weddingEventId)
            ->orderBy('checked_in_at', 'desc')
            ->paginate(10);

        
        return view('invitation_layout.attendant', [
            'presentGuests' => $presentGuests,
            'weddingEvent' => $weddingEvent,
            'couple' => $weddingEvent->couple
        ]);
    }
    
    /**
     * Handle guest attendance status via API
     */
    public function recordAttendant(Request $request)
    {
        $guest = null;
        $weddingEvent = null;
        $invitation = null;
        $weddingEventId = $request->input('wedding_event_id');
        
        // Validate that wedding event ID is provided
        if (!$weddingEventId) {
            return response()->json([
                'success' => false,
                'message' => 'Wedding event ID is required.'
            ], 400);
        }
        
        // Load the wedding event to validate it exists
        $weddingEvent = \App\Models\WeddingEvent::find($weddingEventId);
        if (!$weddingEvent) {
            return response()->json([
                'success' => false,
                'message' => 'Invalid wedding event ID.'
            ], 404);
        }
        
        // Try to find guest by invitation_code (more common in QR codes), code (invitation ID), or guest_id
        if ($request->has('invitation_code')) {
            // Find the invitation by its invitation_code (the string code in the invitation)
            $invitation = \App\Models\Invitation::where('invitation_code', $request->invitation_code)
                ->where('wedding_event_id', $weddingEventId) // Validate against the provided wedding event ID
                ->first();
                
            if (!$invitation) {
                return response()->json([
                    'success' => false,
                    'message' => 'Invalid invitation code or invitation does not belong to this wedding event.'
                ], 404);
            }
            $guest = $invitation->guest;
        } elseif ($request->has('code')) {
            // Find the invitation by its ID (embedded in QR code as an ID)
            $invitation = \App\Models\Invitation::find($request->code);
            
            if (!$invitation) {
                return response()->json([
                    'success' => false,
                    'message' => 'Invalid invitation code.'
                ], 404);
            }
            
            // Validate that the invitation belongs to the specified wedding event
            if ($invitation->wedding_event_id != $weddingEventId) {
                return response()->json([
                    'success' => false,
                    'message' => 'Invalid invitation code or invitation does not belong to this wedding event.'
                ], 404);
            }
            
            $guest = $invitation->guest;
        } elseif ($request->has('guest_id')) {
            // Find the guest by ID
            $guest = Guest::findOrFail($request->guest_id);
            
            // Find the invitation for this guest to get the wedding event
            $invitation = \App\Models\Invitation::where('guest_id', $guest->id)
                ->where('wedding_event_id', $weddingEventId) // Validate against the provided wedding event ID
                ->first();
                
            if (!$invitation) {
                return response()->json([
                    'success' => false,
                    'message' => 'No invitation found for this guest for the specified wedding event.'
                ], 404);
            }
        } else {
            return response()->json([
                'success' => false,
                'message' => 'Either guest_id, invitation_code, or code must be provided.'
            ], 400);
        }
        
        // Check if the guest is already recorded as attended to avoid duplicates
        $existingAttendance = GuestAttendant::where('guest_id', $guest->id)
            ->where('wedding_event_id', $weddingEventId)
            ->first();
            
        if ($existingAttendance) {
            return response()->json([
                'success' => false,
                'message' => 'Guest has already been marked as attended for this event.('.$guest->name.')',
                'name' => $guest->name,
                'status' => 'already_present',
                'data' => [
                    'guest_id' => $guest->id,
                    'guest_name' => $guest->name,
                    'checked_in_at' => $existingAttendance->checked_in_at
                ]
            ]);
        }
        
        // Insert record into guest_attendant table
        $guestAttendant = GuestAttendant::create([
            'guest_id' => $guest->id,
            'wedding_event_id' => $weddingEventId,
            'guest_name' => $guest->name,
        ]);
        
        return response()->json([
            'success' => true,
            'message' => 'Guest attendance recorded successfully.',
            'name' => $guest->name,
            'status' => 'present',
            'data' => [
                'guest_id' => $guest->id,
                'guest_name' => $guest->name,
                'checked_in_at' => $guestAttendant->checked_in_at,
                'wedding_event_id' => $weddingEventId
            ]
        ]);
    }
}
